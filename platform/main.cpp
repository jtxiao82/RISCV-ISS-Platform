/******************************************************
 * This is the main file for the riscv ArchC model    *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 


const char *project_name="riscv";
const char *project_file="riscv.ac";
const char *archc_version="2.0beta1";
const char *archc_options="-abi -fit";

#include <systemc.h>
//#include <chrono>
#include  <time.h>

#include "riscv.H"
#include "tlmMemory.h"
#include "SimpleBus.h"

class simple : public sc_core::sc_module{

  public:
    simple (sc_module_name name);

    riscv                 riscv_proc1;
    #if defined(TLMADDR_FI) || defined(TLMDATA_FI)
    Fi_SimpleBus    <1,1> fi_bus1;
    #else
    SimpleBus 	    <1,1> bus1;
    #endif
    ram                   ram1;
}; // simple

simple::simple (sc_module_name name)
    : 
      sc_core::sc_module (name)
    , riscv_proc1("riscv")
    #if defined(TLMADDR_FI) || defined(TLMDATA_FI)
    , fi_bus1("fi_bus1")
    #else
    , bus1("bus1")
    #endif
    , ram1 ("ram1", "sp1", 0x80000000)
{

    // bus1 masters
    #if defined(TLMADDR_FI) || defined(TLMDATA_FI)
    riscv_proc1.DM.LOCAL_init_socket(fi_bus1.target_socket[0]);
    #else
    riscv_proc1.DM.LOCAL_init_socket(bus1.target_socket[0]);
    #endif

    // bus1 slaves
    #if defined(TLMADDR_FI) || defined(TLMDATA_FI)
    fi_bus1.bindTargetSocket(ram1.sp1, 0x0, 0xffffffff, 0xffffffff);
    #else
    bus1.bindTargetSocket(ram1.sp1, 0x0, 0xffffffff, 0xffffffff);
    #endif
		
}


int sc_main(int ac, char *av[])
{
  clock_t tStart = clock();

  cout << "Constructing." << endl;
  simple top("top");
  uint64_t instr_per_sec = 1000000000; //1G
  #if defined(TLMADDR_FI) || defined(TLMDATA_FI)
  top.fi_bus1.set_clock_period( sc_core::sc_time(1,SC_SEC)/instr_per_sec ); //1ns 
  #else
  top.bus1.set_clock_period( sc_core::sc_time(1,SC_SEC)/instr_per_sec ); //1ns 
  #endif
  cout << "Starting sc_main." << endl;

#ifdef AC_DEBUG
  ac_trace("riscv_proc1.trace");
#endif 
  
  top.riscv_proc1.init(ac, av);
  top.riscv_proc1.set_prog_args();
  cerr << endl;

  sc_start();

  top.riscv_proc1.PrintStat();
  cerr << endl;

#ifdef AC_STATS
  top.riscv_proc1.ac_sim_stats.time = sc_simulation_time();
  top.riscv_proc1.ac_sim_stats.print();
#endif 

#ifdef AC_DEBUG
  ac_close_trace();
#endif 

  cout << "Platform Execution Time: " << ((double)(clock() - tStart)/CLOCKS_PER_SEC) << endl;
  cout << "SystemC Time: " << sc_core::sc_time_stamp() << endl;

  return top.riscv_proc1.ac_exit_status;
}
