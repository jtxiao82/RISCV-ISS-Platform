/******************************************************
 * ArchC Resources header file.                       *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#ifndef  RISCV_ARCH_H
#define  RISCV_ARCH_H

#include  "riscv_parms.H"
#include  "ac_arch_dec_if.H"
#include  "ac_storage.H"
#include  "ac_memport.H"
#include  "ac_regbank.H"
#include  "ac_reg.H"
#include  "ac_tlm2_port.H"
#include  "ac_tlm2_intr_port.H"
 
#include "ac_cache.H"
#include "ac_mem.H"
#include "ac_fifo_replacement_policy.H"
#include "ac_random_replacement_policy.H"
#include "ac_plrum_replacement_policy.H"
#include "ac_lru_replacement_policy.H"
#include "ac_cache_if.H"
//!ArchC class for model-specific architectural resources.

class riscv_arch : public ac_arch_dec_if<riscv_parms::ac_word, riscv_parms::ac_Hword> {
public:

  //!Program Counter.
  ac_reg<unsigned> ac_pc;

  //!Storage Devices.
  ac_tlm2_port DM;
  ac_memport<riscv_parms::ac_word, riscv_parms::ac_Hword> DM_mport;
  ac_regbank<32, riscv_parms::ac_word, riscv_parms::ac_Dword> RB;
  ac_regbank<64, riscv_parms::ac_word, riscv_parms::ac_Dword> RBF;
  ac_reg<riscv_parms::ac_word> fflags;
  ac_reg<riscv_parms::ac_word> frm;
  ac_reg<riscv_parms::ac_word> fcsr;
  ac_write_back_cache<64, 32, 2, riscv_parms::ac_word, ac_memport<riscv_parms::ac_word, riscv_parms::ac_Hword>, ac_fifo_replacement_policy> IC;
  ac_cache_if<riscv_parms::ac_word, riscv_parms::ac_Hword, ac_write_back_cache<64, 32, 2, riscv_parms::ac_word, ac_memport<riscv_parms::ac_word, riscv_parms::ac_Hword>, ac_fifo_replacement_policy> > IC_if;
  ac_memport<riscv_parms::ac_word, riscv_parms::ac_Hword> IC_mport;
  ac_write_through_cache<256, 32, 2, riscv_parms::ac_word, ac_memport<riscv_parms::ac_word, riscv_parms::ac_Hword>, ac_fifo_replacement_policy> DC;
  ac_cache_if<riscv_parms::ac_word, riscv_parms::ac_Hword, ac_write_through_cache<256, 32, 2, riscv_parms::ac_word, ac_memport<riscv_parms::ac_word, riscv_parms::ac_Hword>, ac_fifo_replacement_policy> > DC_if;
  ac_memport<riscv_parms::ac_word, riscv_parms::ac_Hword> DC_mport;
#define SLEEP_AWAKE_MODE
  ac_reg<riscv_parms::ac_word> intr_reg;


  //!Constructor.
  explicit riscv_arch();

  //!Module initialization method.
  virtual void init(int ac, char* av[]) = 0;

  //!Module finalization method.
  virtual void stop(int status = 0) = 0;

  //!Virtual destructor declaration.
  virtual ~riscv_arch() {};

  static int globalId;
  //int getId() { return id.read(); } // Comment for avoiding compilation error
};

#endif  //_RISCV_ARCH_H
